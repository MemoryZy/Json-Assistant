# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
    paths-ignore:
#      - '.github/**'
      - 'gradle/**'
      - '.gitignore'
      - 'README.md'
      - 'README_zh.md'
  # Trigger the workflow on any pull request
  pull_request:
    paths-ignore:
      #      - '.github/**'
      - 'gradle/**'
      - '.gitignore'
      - 'README.md'
      - 'README_zh.md'
  # 可手动操控
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v3

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 11

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 11

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml


  verify:
    name: Verify Plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 11

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build plugin
        run: ./gradlew buildPlugin

      - name: Verify Plugin on IntelliJ Platforms
        id: verify
        uses: ChrisCarini/intellij-platform-plugin-verifier-action@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          ide-versions: |
#            ideaIU:2021.1.3
            ideaIU:LATEST-EAP-SNAPSHOT
            ideaIC:LATEST-EAP-SNAPSHOT
            ideaIC:2021.1.3

          failure-levels: |
            COMPATIBILITY_PROBLEMS
            INTERNAL_API_USAGES
            MISSING_DEPENDENCIES
            INVALID_PLUGIN
            OVERRIDE_ONLY_API_USAGES

          #  COMPATIBILITY_WARNINGS 	"兼容性警告"
          #  COMPATIBILITY_PROBLEMS 	"兼容性问题"
          #  DEPRECATED_API_USAGES 	"已弃用的API"
          #  EXPERIMENTAL_API_USAGES 	"实验性API"
          #  INTERNAL_API_USAGES 	"内部API"
          #  OVERRIDE_ONLY_API_USAGES 	"仅覆盖API"
          #  NON_EXTENDABLE_API_USAGES 	"不可扩展的API"
          #  PLUGIN_STRUCTURE_WARNINGS 	"插件结构警告"
          #  MISSING_DEPENDENCIES 	"缺少依赖项"
          #  INVALID_PLUGIN 	"无效插件"
          #  NOT_DYNAMIC 	"动态插件（不重启IDE就无法加载/卸载插件）"

      - name: Get log file path and print contents
        run: |
          echo "The verifier log file [${{ steps.verify.outputs.verification-output-log-filename }}] contents : " ;
          cat ${{ steps.verify.outputs.verification-output-log-filename }}

      # 上传至 Artifacts
      - name: Save artifact with verify results
        uses: actions/upload-artifact@v4
        with:
          name: result
          path: |
            ${{ steps.verify.outputs.verification-output-log-filename }}
          retention-days: 7  # 保存7天

  # Run plugin structure verification along with IntelliJ Plugin Verifier
#  verify:
#    name: Verify plugin
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#      # Free GitHub Actions Environment Disk Space
#      - name: Maximize Build Space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: false
#          large-packages: false
#
#      # Check out the current repository
#      - name: Fetch Sources
#        uses: actions/checkout@v4
#
#      # Set up Java environment for the next steps
#      - name: Setup Java
#        uses: actions/setup-java@v4
#        with:
#          distribution: zulu
#          java-version: 11
#
#      # Setup Gradle
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v3
#        with:
#          gradle-home-cache-cleanup: true
#
#      - name: Grant execute permission for Gradle wrapper
#        run: chmod +x ./gradlew
#
#      # Cache Plugin Verifier IDEs
#      - name: Setup Plugin Verifier IDEs Cache
#        uses: actions/cache@v4
#        with:
#          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
#          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}
#
#      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
#      - name: Run Plugin Verification tasks
#        continue-on-error: true
#        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}
#
#      # Collect Plugin Verifier Result
#      - name: Collect Plugin Verifier Result
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: pluginVerifier-result
#          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
#  releaseDraft:
#    name: Release Draft
#    if: github.event_name != 'pull_request'
#    needs: [ build, test, verify ]
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#
#      # Check out the current repository
#      - name: Fetch Sources
#        uses: actions/checkout@v4
#
#      # Remove old release drafts by using the curl request for the available releases with a draft flag
#      - name: Remove Old Release Drafts
#        env:
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#        run: |
#          gh api repos/{owner}/{repo}/releases \
#            --jq '.[] | select(.draft == true) | .id' \
#            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
#
#      # Create a new release draft which is not publicly visible and requires manual acceptance
#      - name: Create Release Draft
#        env:
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#        run: |
#          gh release create "v${{ needs.build.outputs.version }}" \
#            --draft \
#            --title "v${{ needs.build.outputs.version }}" \
#            --notes "$(cat << 'EOM'
#          ${{ needs.build.outputs.changelog }}
#          EOM
#          )"
